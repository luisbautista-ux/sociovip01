

export interface PromotionDetails { // For public display
  id: string;
  title: string;
  description: string;
  validUntil: string; // Date string
  imageUrl: string;
  promoCode: string; // Unique code for this promotion, might be optional if QR is direct
  aiHint: string; // Hint for placeholder image
}

export type QrCodeStatusGenerated = 'available' | 'redeemed' | 'expired'; 

// Represents a client who generates QR codes via promotional codes (public page flow)
export interface QrClient {
  id: string;
  name: string;
  surname: string;
  phone: string;
  dob: string; // Date of Birth, YYYY-MM-DD T HH:mm:ss
  dni: string; // Document ID
  registrationDate: string; // ISO date string of first QR generation
}

// Data for the QR code itself, linking a QrClient to a Promotion (public page QR data)
export interface QrCodeData {
  user: QrClient;
  promotion: PromotionDetails; // The public view of the promotion
  // qrImageUrl: string; // No longer needed, will be generated on the fly
  code: string; // Validated promoCode used or a generated unique code for public flow
  status: 'generated' | 'utilized' | 'expired'; // Status for public flow QR
}

// Represents a VIP Member with a detailed profile and membership
export interface SocioVipMember {
  id: string;
  name: string;
  surname: string;
  phone: string;
  dob: string; // YYYY-MM-DD T HH:mm:ss
  dni: string;
  email: string; // For account login
  address?: string;
  profession?: string;
  preferences?: string[]; // Array of preference strings
  loyaltyPoints: number;
  membershipStatus: 'active' | 'inactive' | 'pending_payment' | 'cancelled';
  staticQrCodeUrl?: string; // URL to their static membership QR
  joinDate: string; // ISO date string
}

// Admin Panel Specific Types
export interface AdminDashboardStats {
  totalBusinesses: number;
  totalPlatformUsers: number; // Superadmins, Business Admins, Business Staff
  totalPromotionsActive: number; // Count of active BusinessEntity type promotion
  totalQrCodesGenerated: number; // All generated codes for promotions/events
  totalQrClients: number; // Total QrClient records
  totalSocioVipMembers: number; // Total SocioVipMember records
}

export interface PromotionAnalyticsData { // For SuperAdmin analytics overview
  month: string;
  promotionsCreated: number; // New BusinessEntity type promotion
  qrCodesGenerated: number;
  qrCodesUtilized: number;
}

// Business Entity (as created by SuperAdmin for the platform)
export interface Business {
  id: string;
  name: string;
  contactEmail: string; // Email of the primary contact/owner for platform comms
  joinDate: string;
  activePromotions: number; // Potentially count of active BusinessEntity type promotion
}

// Users of the platform (SuperAdmins, Business Admins, Business Staff)
export interface PlatformUser {
  id: string;
  name: string;
  email: string; // Login email
  role: 'superadmin' | 'business_admin' | 'business_staff';
  businessId?: string; // Required if role is business_admin or business_staff
  lastLogin: string;
}


// ---- Types for Business Panel ----
export type BusinessEntityType = 'promotion' | 'event' | 'survey';

// Represents a code generated by a business for one of its entities
export interface GeneratedCode {
  id: string;
  value: string; // The actual 9-digit code string
  entityId: string; // ID of BusinessManagedEntity (Promotion, Event, etc.)
  status: QrCodeStatusGenerated; // 'available', 'redeemed', 'expired'
  generatedByName: string; // Mock: "Business Admin" or specific staff name or promoter name
  generatedDate: string; // ISO Date string
  redemptionDate?: string; // ISO Date string, if redeemed
  observation?: string; // Optional observation for the code
  redeemedByInfo?: { // Info of the client who redeemed this specific code
    dni: string;
    name: string;
    phone?: string; // Optional, if captured during a simplified redemption
  };
  isVipCandidate?: boolean; // Marked by Host during redemption
}

// For assigning promoters to specific events/promotions with specific commission
export interface EventPromoterAssignment {
  promoterProfileId: string; // From global PromoterProfile list
  promoterName: string; // For display convenience
  promoterEmail?: string; // For display convenience
  commissionRate?: string; // Event/Promotion specific commission
  notes?: string; // Event/Promotion specific notes for this promoter
}

export interface BusinessManagedEntity { // Promotions, Events, Surveys created by a Business
  id: string;
  businessId: string;
  type: BusinessEntityType;
  name: string;
  description: string;
  startDate: string; // ISO Date string e.g. "2024-08-01T12:00:00"
  endDate: string; // ISO Date string e.g. "2024-12-31T12:00:00"
  usageLimit?: number; // Max number of times it can be used/redeemed (for promotions)
  maxAttendance?: number; // Max attendance for events
  isActive: boolean;
  imageUrl?: string; // Optional image for the entity
  aiHint?: string;
  generatedCodes?: GeneratedCode[]; // Codes generated for this entity
  ticketTypes?: TicketType[];
  eventBoxes?: EventBox[];
  assignedPromoters?: EventPromoterAssignment[]; // Promoters assigned to this specific event/promotion
}

export interface PromoterProfile { // Global profile for a promoter
  id: string;
  name: string;
  email: string;
  phone?: string;
}

export interface BusinessPromoterLink { // How a Business links to a Promoter (Global Link)
  id: string;
  businessId: string;
  promoterProfileId: string;
  commissionRate?: string; // e.g., "10%" or "S/5 por QR" - General commission with this business
  isActive: boolean;
  joinDate: string;
  promoterProfile?: PromoterProfile; 
}


export interface TicketType {
  id: string;
  businessId: string; 
  eventId: string; 
  name: string;
  cost: number;
  description?: string;
  quantity?: number; // Max available for this type
}

export interface EventBox {
  id: string;
  businessId: string; 
  eventId: string; 
  name: string;
  cost: number;
  description?: string;
  status: 'available' | 'unavailable';
  capacity?: number; // How many people fit
  sellerName?: string; 
  ownerName?: string;  
  ownerDni?: string;   
}

// Business Panel Client View Type
export type BusinessClientType = 'qr' | 'vip';

export interface BusinessClientView {
  id: string; // Unique ID for the view, can be QrClient.id or SocioVipMember.id
  clientType: BusinessClientType;
  name: string;
  surname: string;
  dni: string;
  phone?: string;
  email?: string; // More common for VIP
  relevantDate: string; // registrationDate for QrClient, joinDate for SocioVipMember
  isVip: boolean;
  loyaltyPoints?: number; // Specific to SocioVipMember
  membershipStatus?: SocioVipMember['membershipStatus']; // Specific to SocioVipMember
}


// Form data types
export interface BusinessFormData {
  name: string;
  contactEmail: string;
}

export interface PlatformUserFormData {
  name: string;
  email: string;
  role: 'superadmin' | 'business_admin' | 'business_staff';
  businessId?: string;
}

export interface SocioVipMemberFormData {
  name: string;
  surname: string;
  dni: string;
  phone: string;
  dob: Date;
  email: string;
  address?: string;
  profession?: string;
  preferences?: string; // Comma-separated
  loyaltyPoints: number;
  membershipStatus: 'active' | 'inactive' | 'pending_payment' | 'cancelled';
}

export interface NewQrClientFormData { // From public page
  dni: string;
  name: string;
  surname: string;
  phone: string;
  dob: Date;
}

export interface BusinessPromotionFormData {
  name: string;
  description: string;
  startDate: Date;
  endDate: Date;
  usageLimit?: number;
  isActive: boolean;
  imageUrl?: string;
  aiHint?: string;
}

export interface BusinessEventFormData {
  name: string;
  description: string;
  startDate: Date;
  endDate: Date;
  maxAttendance?: number; // Specific to events
  isActive: boolean;
  imageUrl?: string;
  aiHint?: string;
}

export interface BusinessPromoterFormData { // For inviting/linking a promoter to the business globally
  promoterName: string;
  promoterEmail: string;
  promoterPhone?: string;
  commissionRate?: string; // General commission with the business
}

// For Promoter Commissions Page
export interface PromoterCommissionEntry {
    id: string;
    businessName: string;
    entityName: string; // Promotion or Event name
    entityType: 'promotion' | 'event';
    codesRedeemedByPromoter: number;
    commissionRate: string; // e.g. "S/ 2.50 por c√≥digo" or "5% de venta"
    commissionEarned: number;
    paymentStatus: 'Pendiente' | 'Pagado';
    period: string; // e.g. "Agosto 2024"
}

// Form data for TicketType
export interface TicketTypeFormData {
  name: string;
  cost: number;
  description?: string;
  quantity?: number;
}

// Form data for EventBox
export interface EventBoxFormData {
  name: string;
  cost: number;
  description?: string;
  status: 'available' | 'unavailable';
  capacity?: number;
  sellerName?: string;
  ownerName?: string;
  ownerDni?: string;
}

// Form data for assigning a promoter to an event
export interface EventPromoterAssignmentFormData {
    promoterProfileId: string;
    commissionRate?: string;
    notes?: string;
}

export interface BatchBoxFormData {
  prefix: string;
  fromNumber: number;
  toNumber: number;
  cost: number; // Cost per box
  capacity?: number; // Capacity per box (optional)
  description?: string; // Common description (optional)
  status: 'available' | 'unavailable'; // Initial status for all boxes in batch
}
