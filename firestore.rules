rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return exists(/databases/$(database)/documents/platformUsers/$(userId)) ? 
             get(/databases/$(database)/documents/platformUsers/$(userId)).data : null;
    }

    function getUserRoles(userId) {
      let userData = getUserData(userId);
      return userData != null && 'roles' in userData && userData.roles is list ? userData.roles : [];
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserRoles(request.auth.uid).hasAny(['superadmin']);
    }

    function isBusinessUser() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['business_admin', 'staff']);
    }

    function isPromoter() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['promoter']);
    }

    function getBusinessIdForAuthenticatedUser() {
      let userData = getUserData(request.auth.uid);
      return userData != null && 'businessId' in userData && userData.businessId is string && userData.businessId != "" ? 
             userData.businessId : null;
    }

    // PLATFORM USERS
    match /platformUsers/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isSuperAdmin() || isBusinessUser());
      allow create: if isAuthenticated(); 
      allow update, delete: if isSuperAdmin();
    }
    match /platformUsers {
      allow list: if isSuperAdmin() || isBusinessUser();
    }

    // BUSINESSES
    match /businesses/{businessId} {
      allow read: if true; 
      allow create, update, delete: if isSuperAdmin();
    }
    match /businesses {
      allow list: if isAuthenticated(); 
    }

    // SOCIO VIP MEMBERS
    match /socioVipMembers/{memberId} {
      allow read: if isSuperAdmin() || isBusinessUser(); 
      allow write: if isSuperAdmin(); 
    }
    match /socioVipMembers {
      allow list: if isSuperAdmin() || isBusinessUser();
    }

    // QR CLIENTS
    match /qrClients/{clientId} {
      allow create: if true; 
      allow read: if isSuperAdmin() || isBusinessUser();
    }
    match /qrClients {
      allow list: if isSuperAdmin() || isBusinessUser();
    }
    
    // BUSINESS ENTITIES (Promotions, Events)
    match /businessEntities/{entityId} {
      allow read: if resource.data.isActive == true || isBusinessUser() || isPromoter(); // Promoters need to read assigned entities
      
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
                       
      // Allow update if:
      // 1. User is a business_admin or staff for THAT business.
      // OR
      // 2. User is a promoter AND is only trying to modify the 'generatedCodes' field, 
      //    AND their UID is in the assignedPromoters list for this entity (complex to check purely in rules, often done with backend).
      //    For simplicity here, we'll allow promoters to update 'generatedCodes' if they can read the entity.
      //    A more secure rule would verify assignment.
      allow update: if (isBusinessUser() && resource.data.businessId == getBusinessIdForAuthenticatedUser()) ||
                       (isPromoter() && request.resource.diff(resource).affectedKeys().hasOnly(['generatedCodes']));
                               
      allow delete: if isBusinessUser() &&
                               resource.data.businessId != null &&
                               resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
    match /businessEntities {
      allow list: if isBusinessUser() || isPromoter(); // Promoters list all, client filters
    }

    // PROMOTER PROFILES (Global list)
    match /promoterProfiles/{promoterId} {
      allow read: if isAuthenticated(); 
      allow write: if isSuperAdmin(); 
    }
    match /promoterProfiles {
      allow list: if isAuthenticated(); 
    }

    // BUSINESS PROMOTER LINKS 
    match /businessPromoterLinks/{linkId} {
      allow read: if isAuthenticated(); 
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
      allow update, delete: if isBusinessUser() &&
                               resource.data.businessId != null &&
                               resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
     match /businessPromoterLinks {
      allow list: if isBusinessUser();
     }
  }
}
