
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's profile data from 'platformUsers' collection
    function getUserProfile(uid) {
      return get(/databases/$(database)/documents/platformUsers/$(uid)).data;
    }
    
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      // Check if the user is authenticated and has a profile
      let userProfile = getUserProfile(request.auth.uid);
      return isAuthenticated() && 
             userProfile != null &&
             userProfile.roles is list && // Ensure 'roles' is a list
             role in userProfile.roles;
    }

    // Read access to businesses is public for their public pages
    match /businesses/{businessId} {
      allow read: if true;
      allow write: if hasRole('superadmin');
      // Business admin can only update their own business branding/settings
      allow update: if isAuthenticated() && 
                       (hasRole('superadmin') || 
                        (
                          (hasRole('business_admin') || hasRole('staff')) && 
                          getUserProfile(request.auth.uid).businessId == businessId &&
                          // Prevent business admin from changing critical fields
                          !('ruc' in request.resource.data) &&
                          !('razonSocial' in request.resource.data) &&
                          !('joinDate' in request.resource.data)
                        )
                       );
    }
    
    // businessEntities (promotions, events, etc.)
    match /businessEntities/{entityId} {
      allow read: if true;
      // Only superadmin or an admin/staff of the specific business can write/update
      allow create, update, delete: if isAuthenticated() &&
                                     (hasRole('superadmin') ||
                                      (
                                        (hasRole('business_admin') || hasRole('staff')) &&
                                        request.resource.data.businessId == getUserProfile(request.auth.uid).businessId
                                      ));
    }
    
    // businessPromoterLinks
    match /businessPromoterLinks/{linkId} {
      allow read: if isAuthenticated() && (hasRole('superadmin') || hasRole('business_admin') || hasRole('staff'));
      allow create, update, delete: if isAuthenticated() &&
                                     (hasRole('superadmin') ||
                                      (
                                        (hasRole('business_admin') || hasRole('staff')) &&
                                        request.resource.data.businessId == getUserProfile(request.auth.uid).businessId
                                      ));
    }

    // QR Clients
    match /qrClients/{clientId} {
      // Allow read for SuperAdmins or Admins/Staff of the business the client generated for
      allow read: if isAuthenticated() && 
                     (hasRole('superadmin') || 
                      ((hasRole('business_admin') || hasRole('staff')) && 
                       resource.data.generatedForBusinessId == getUserProfile(request.auth.uid).businessId));
      // Anyone can create a QR client profile (public pages)
      allow create: if true;
      allow update, delete: if hasRole('superadmin');
    }

    // Platform Users (admins, staff, promoters, hosts)
    match /platformUsers/{userId} {
      // Any authenticated user can read their own profile
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasRole('superadmin') || hasRole('business_admin'));
      
      // CREATE: Only SuperAdmin can create platform users directly via API with admin SDK.
      // Business Admins create via a different, more secure flow.
      allow create: if hasRole('superadmin') || 
                       (
                         hasRole('business_admin') && 
                         request.resource.data.businessId == getUserProfile(request.auth.uid).businessId &&
                         // Business admin can only create staff or host
                         request.resource.data.roles.hasOnly(['staff', 'host'])
                       );
                       
      // UPDATE: SuperAdmin can update anyone. Business admin can update their staff/hosts.
      allow update: if isAuthenticated() && 
                      (
                        hasRole('superadmin') ||
                        (
                          (hasRole('business_admin') || hasRole('staff')) &&
                          // The user being updated must belong to the same business as the admin
                          resource.data.businessId == getUserProfile(request.auth.uid).businessId &&
                          // The admin cannot change the user's businessId
                          request.resource.data.businessId == resource.data.businessId &&
                          // The admin cannot escalate privileges
                          !request.resource.data.roles.hasAny(['superadmin'])
                        )
                      );
                      
      allow delete: if hasRole('superadmin');
    }
    
    // Socio VIP Members
    match /socioVipMembers/{memberId} {
      // Only SuperAdmins and Business Admins can read
      allow read: if isAuthenticated() && (hasRole('superadmin') || hasRole('business_admin') || hasRole('staff'));
      // Only SuperAdmins can write
      allow write: if hasRole('superadmin');
    }
  }
}
