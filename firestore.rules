rules_version = '2'; 
  
service cloud.firestore {
  match /databases/{database}/documents {
 
    // ===============================
    //            Helpers
    // ===============================
    function isSignedIn() {
      return request.auth != null;
    }
		match /businessEntities/{entityId} {
  allow read: if true;
  allow create, update, delete: if true; // ❌ Solo para test. Quitar apenas verifiques.
}

		match /qrClients/{clientId} {
  // Permite la lectura pública (consulta de los datos) solo si el usuario está autenticado y tiene el rol adecuado.
  allow read: if isSignedIn() && (
    isSuperAdmin() || // Permite a los superadministradores leer
    isBusinessAdmin(getUserProfile(request.auth.uid).businessId) // Permite a los business admins del negocio correspondiente leer
  );

  // Permite la creación, actualización y eliminación solo para superadmin y businessadmin del negocio correspondiente.
  allow create, update, delete: if isSignedIn() && (
    isSuperAdmin() || // Permite la creación, actualización y eliminación solo a superadmins
    isBusinessAdmin(getUserProfile(request.auth.uid).businessId) // Permite a los business admins del negocio correspondiente
  );
}
    function getUserProfile(userId) {
      // Nota: get() en reglas puede leer sin depender de permisos de cliente
      return get(/databases/$(database)/documents/platformUsers/$(userId)).data;
    }

    function isSuperAdmin() {
      return isSignedIn() && 'superadmin' in getUserProfile(request.auth.uid).roles;
    }

    function isRoleForBusiness(role, businessId) {
      return isSignedIn()
        && role in getUserProfile(request.auth.uid).roles
        && getUserProfile(request.auth.uid).businessId == businessId;
    }

    function isBusinessAdmin(businessId) {
      return isRoleForBusiness('business_admin', businessId);
    }

    function isStaff(businessId) {
      return isRoleForBusiness('staff', businessId);
    }

    function isHost(businessId) {
      return isRoleForBusiness('host', businessId);
    }

    function isPromoter() {
      return isSignedIn() && 'promoter' in getUserProfile(request.auth.uid).roles;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // ===============================
    //          Collections
    // ===============================

    // Negocios: lectura pública; solo superadmin escribe
    match /businesses/{businessId} {
      allow read: if true;
      allow create, update, delete: if isSuperAdmin();
    }

    // Entidades del negocio (promos/eventos):
    // lectura pública; escribir SOLO superadmin/admin/staff del negocio.
    match /businessEntities/{entityId} {
      allow read: if true;

      // create: valida con request.resource.data.businessId
      allow create: if isSuperAdmin()
        || isBusinessAdmin(request.resource.data.businessId)
        || isStaff(request.resource.data.businessId);

      // update: acepta businessId tanto del doc existente como del nuevo payload
      allow update: if isSuperAdmin()
        || isBusinessAdmin(request.resource.data.businessId)
        || isBusinessAdmin(resource.data.businessId)
        || isStaff(request.resource.data.businessId)
        || isStaff(resource.data.businessId);

      // delete: admin del negocio o superadmin
      allow delete: if isSuperAdmin()
        || isBusinessAdmin(resource.data.businessId);
    }

    // Clientes QR:
    // - Lectura pública explícita (get + list) -> permite query por DNI desde páginas públicas.
    // - Crear permitido (si quieres restringir, cambia a: isSignedIn()).
    // - update/delete bloqueados para público.
    match /qrClients/{clientId} {
      allow get, list: if true;         // necesario para query where('dni'...)
      allow create: if true;            // <-- cambiar a isSignedIn() si deseas exigir login para crear
      allow update, delete: if false;   // no permitir edición/borrado desde cliente público
    }

    // Usuarios de la plataforma:
    // Mantengo lectura para cualquier usuario autenticado (como tenías),
    // y solo superadmin puede crear/editar/borrar.
    match /platformUsers/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    // Vínculos de promotores con negocios
    match /businessPromoterLinks/{linkId} {
      allow read: if isSuperAdmin()
                || isBusinessAdmin(resource.data.businessId)
                || isStaff(resource.data.businessId) // <-- AÑADIDO
                || isPromoter();
      allow create, update: if isSuperAdmin()
                || isBusinessAdmin(request.resource.data.businessId)
                || isStaff(request.resource.data.businessId); // <-- AÑADIDO
      allow delete: if isSuperAdmin()
                || isBusinessAdmin(resource.data.businessId);
    }

    // Socios VIP: gestión solo por superadmin
    match /socioVipMembers/{memberId} {
      allow read, write: if isSuperAdmin();
    }
  }
}