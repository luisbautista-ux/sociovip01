
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return exists(/databases/$(database)/documents/platformUsers/$(userId)) ? 
             get(/databases/$(database)/documents/platformUsers/$(userId)).data : null;
    }

    function getUserRoles(userId) {
      let userData = getUserData(userId);
      return userData != null && 'roles' in userData && userData.roles is list ? userData.roles : [];
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserRoles(request.auth.uid).hasAny(['superadmin']);
    }

    function isBusinessUser() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['business_admin', 'staff']);
    }

    function isPromoter() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['promoter']);
    }

    function getBusinessIdForAuthenticatedUser() {
      let userData = getUserData(request.auth.uid);
      return userData != null && 'businessId' in userData && userData.businessId is string && userData.businessId != "" ? 
             userData.businessId : null;
    }

    function isPromoterAssignedToThisEntity(entityData) {
      return isAuthenticated() && 
             isPromoter() &&
             entityData != null &&
             'assignedPromoters' in entityData &&
             entityData.assignedPromoters is list &&
             // Ensure promoterProfileId in assignedPromoters matches request.auth.uid
             // This assumes promoterProfileId IS the Firebase Auth UID for PlatformUser promoters
             entityData.assignedPromoters.exists(p => p.promoterProfileId == request.auth.uid);
    }

    // PLATFORM USERS
    match /platformUsers/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isSuperAdmin() || isBusinessUser());
      allow create: if isAuthenticated(); 
      allow update, delete: if isSuperAdmin();
    }
    match /platformUsers {
      allow list: if isSuperAdmin() || isBusinessUser(); 
    }

    // BUSINESSES
    match /businesses/{businessId} {
      allow read: if true; 
      allow create, update, delete: if isSuperAdmin();
    }
    match /businesses {
      allow list: if isAuthenticated(); 
    }

    // SOCIO VIP MEMBERS
    match /socioVipMembers/{memberId} {
      allow read: if isSuperAdmin() || isBusinessUser(); 
      allow write: if isSuperAdmin(); 
    }
    match /socioVipMembers {
      allow list: if isSuperAdmin() || isBusinessUser(); 
    }

    // QR CLIENTS
    match /qrClients/{clientId} {
      allow create: if true; 
      allow read: if isSuperAdmin() || isBusinessUser(); 
    }
    match /qrClients {
      allow list: if isSuperAdmin() || isBusinessUser(); 
    }
    
    // BUSINESS ENTITIES (Promotions, Events)
    match /businessEntities/{entityId} {
      allow read: if (resource.data.isActive == true) || isBusinessUser() || isPromoter();
      
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
                       
      allow update: if 
        // Business users can update their own entities
        (isBusinessUser() && 
         resource.data.businessId == getBusinessIdForAuthenticatedUser() &&
         request.resource.data.businessId == getBusinessIdForAuthenticatedUser() // Ensure businessId is not changed by businessUser
        ) ||
        // Promoters can update an entity IF:
        // 1. They are an assigned promoter to this entity (checked against existing document's data)
        // 2. They are ONLY trying to modify the 'generatedCodes' field
        // 3. They are only ADDING codes (new array size is >= old array size), 
        //    and the non-generatedCodes fields are identical to the existing document.
        (isPromoter() &&
         isPromoterAssignedToThisEntity(resource.data) && // Check against existing document
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['generatedCodes']) &&
         request.resource.data.generatedCodes.size() >= resource.data.generatedCodes.size()
        );
                       
      allow delete: if isBusinessUser() &&
                               resource.data.businessId != null &&
                               resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
    match /businessEntities {
      allow list: if isBusinessUser() || isPromoter() || (request.query.resource == null || request.query.resource.data.isActive == true);
    }

    // PROMOTER PROFILES (Global list)
    match /promoterProfiles/{promoterId} {
      allow read: if isAuthenticated(); 
      allow write: if isSuperAdmin(); 
    }
    match /promoterProfiles {
      allow list: if isAuthenticated(); 
    }

    // BUSINESS PROMOTER LINKS 
    match /businessPromoterLinks/{linkId} {
      allow read: if isAuthenticated(); 
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
      allow update, delete: if isBusinessUser() &&
                               resource.data.businessId != null &&
                               resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
     match /businessPromoterLinks {
      allow list: if isBusinessUser();
     }
  }
}

    