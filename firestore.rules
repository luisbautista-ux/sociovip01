
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // pathof(userId) refers to something like /databases/$(database)/documents/platformUsers/$(userId)
      // This checks if the document exists before trying to get data.
      return exists(/databases/$(database)/documents/platformUsers/$(userId)) ? 
             get(/databases/$(database)/documents/platformUsers/$(userId)).data : null;
    }

    function getUserRoles(userId) {
      let userData = getUserData(userId);
      // Ensures 'roles' exists and is a list (array) before trying to access it.
      return userData != null && 'roles' in userData && userData.roles is list ? userData.roles : [];
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserRoles(request.auth.uid).hasAny(['superadmin']);
    }

    function isBusinessUser() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['business_admin', 'staff']);
    }

    function isPromoter() {
      let userRoles = getUserRoles(request.auth.uid);
      return isAuthenticated() && userRoles.hasAny(['promoter']);
    }

    function getBusinessIdForAuthenticatedUser() {
      let userData = getUserData(request.auth.uid);
      // Ensures 'businessId' exists, is a string, and is not empty.
      return userData != null && 'businessId' in userData && userData.businessId is string && userData.businessId != "" ? 
             userData.businessId : null; // Return null if no valid businessId for clarity in rules
    }

    // PLATFORM USERS
    match /platformUsers/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isSuperAdmin() || isBusinessUser()); // Business users can read profiles for DNI checks
      allow create: if isAuthenticated(); // Superadmin creates, or user creates their own on signup
      allow update, delete: if isSuperAdmin(); // Only superadmin can modify/delete any profile
    }
    match /platformUsers {
      allow list: if isSuperAdmin() || isBusinessUser(); // Business users need to list for DNI filter
    }

    // BUSINESSES
    match /businesses/{businessId} {
      allow read: if true; // Publicly readable details for business pages
      allow create, update, delete: if isSuperAdmin();
    }
    match /businesses {
      allow list: if isAuthenticated(); // Admins/Business Users might list businesses
    }

    // SOCIO VIP MEMBERS
    match /socioVipMembers/{memberId} {
      allow read: if isSuperAdmin() || isBusinessUser(); // Business users can read profiles for DNI checks
      allow write: if isSuperAdmin(); 
    }
    match /socioVipMembers {
      allow list: if isSuperAdmin() || isBusinessUser(); 
    }

    // QR CLIENTS
    match /qrClients/{clientId} {
      allow create: if true; // Public creation
      allow read: if isSuperAdmin() || isBusinessUser(); 
    }
    match /qrClients {
      allow list: if isSuperAdmin() || isBusinessUser();
    }
    
    // BUSINESS ENTITIES (Promotions, Events)
    match /businessEntities/{entityId} {
      // Public can read if active, authenticated users can read any (frontend filters for roles)
      allow read: if (resource.data.isActive == true && request.auth == null) || isAuthenticated(); 
      
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
                       
      allow update: if 
        // Rule for Business Owner/Staff
        (
          isBusinessUser() &&
          resource.data.businessId != null && 
          resource.data.businessId == getBusinessIdForAuthenticatedUser() &&
          // Ensure critical fields are not changed by mistake if not intended for this role
          request.resource.data.businessId == resource.data.businessId &&
          request.resource.data.type == resource.data.type
        ) 
        || 
        // Rule for Promoter: can ONLY update generatedCodes
        (
          isPromoter() &&
          // This is a simplified check. A robust check would verify if this promoter's UID
          // is in resource.data.assignedPromoters list.
          // For now, we allow if they are a promoter and only touching generatedCodes.
          // The client-side logic *must* ensure they only see/interact with assigned entities.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['generatedCodes']) &&
          // And they are not changing immutable fields of the entity itself
          request.resource.data.businessId == resource.data.businessId &&
          request.resource.data.type == resource.data.type
        );
                       
      allow delete: if isBusinessUser() &&
                       resource.data.businessId != null &&
                       resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
    match /businessEntities {
      // Public can list if they filter by isActive: true (client-side enforcement of filter)
      // Business Users and Promoters can list (client-side filters for their specific businessId/assignments)
      allow list: if true; 
    }

    // PROMOTER PROFILES (Global list)
    match /promoterProfiles/{promoterId} {
      allow read: if isAuthenticated(); 
      allow write: if isSuperAdmin(); 
    }
    match /promoterProfiles {
      allow list: if isAuthenticated(); 
    }

    // BUSINESS PROMOTER LINKS 
    match /businessPromoterLinks/{linkId} {
      allow read: if isAuthenticated(); 
      
      allow create: if isBusinessUser() &&
                       request.resource.data.businessId != null &&
                       request.resource.data.businessId == getBusinessIdForAuthenticatedUser();
                       
      allow update, delete: if isBusinessUser() &&
                               resource.data.businessId != null &&
                               resource.data.businessId == getBusinessIdForAuthenticatedUser();
    }
     match /businessPromoterLinks {
      allow list: if isBusinessUser();
     }
  }
}

    