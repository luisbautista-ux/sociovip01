
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    //         HELPER FUNCTIONS
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/platformUsers/$(request.auth.uid)).data.roles.hasAny(['superadmin']);
    }

    function isBusinessOwnerOrStaff(businessId) {
        let userProfile = get(/databases/$(database)/documents/platformUsers/$(request.auth.uid)).data;
        return isSignedIn() && userProfile.businessId == businessId && userProfile.roles.hasAny(['business_admin', 'staff']);
    }

    // =================================
    //         COLLECTION RULES
    // =================================

    match /businesses/{businessId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /platformUsers/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list, write: if isSuperAdmin();
    }

    // --- REGLA CORREGIDA ---
    // Permite lectura pública y escritura controlada para el canje de códigos.
    match /businessEntities/{entityId} {
      allow read: if true;
      // Permite la escritura si:
      // 1. Es un staff/admin del negocio.
      // 2. O si un usuario PÚBLICO está actualizando el array 'generatedCodes'
      //    para marcar un código como 'redeemed'.
      allow write: if isBusinessOwnerOrStaff(request.resource.data.businessId) ||
                      (
                        // Asegura que solo el array 'generatedCodes' está siendo modificado.
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['generatedCodes']) &&
                        // Valida cada código en el nuevo array para prevenir cambios maliciosos.
                        request.resource.data.generatedCodes.size() == resource.data.generatedCodes.size() &&
                        (size(request.resource.data.generatedCodes.filter(c => c.status == 'redeemed')) 
                          - size(resource.data.generatedCodes.filter(c => c.status == 'redeemed'))) == 1
                      );
    }

    match /businessPromoterLinks/{linkId} {
      allow read, write: if isBusinessOwnerOrStaff(request.resource.data.businessId);
    }
    
    match /qrClients/{clientId} {
       allow create: if true;
       allow list: if true; // Allows public queries like checking for DNI
       allow read, update, delete: if isSuperAdmin();
    }
    
    match /socioVipMembers/{memberId} {
       allow read, write: if isSuperAdmin();
    }

    match /{path=**} {
      allow read, write: if false;
    }
  }
}
