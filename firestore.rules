
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user profile data from Firestore
    function getUserProfile(uid) {
      return get(/databases/$(database)/documents/platformUsers/$(uid)).data;
    }

    // Helper function to check if a user has a specific role
    function hasRole(uid, role) {
      let userRoles = getUserProfile(uid).roles;
      return role in userRoles;
    }
    
    // Helper function to check if the requesting user has ANY of the specified roles
    function hasAnyRole(uid, roles) {
        let userRoles = getUserProfile(uid).roles;
        return userRoles.hasAny(roles);
    }

    // Check if the user is a superadmin
    function isSuperAdmin(uid) {
      return hasRole(uid, 'superadmin');
    }

    // Check if the user is an admin of a specific business
    function isBusinessAdminFor(uid, businessId) {
        let profile = getUserProfile(uid);
        return profile.businessId == businessId && hasRole(uid, 'business_admin');
    }
    
    // Check if the user is staff (admin or staff role) for a specific business
    function isStaffFor(uid, businessId) {
        let profile = getUserProfile(uid);
        return profile.businessId == businessId && hasAnyRole(uid, ['business_admin', 'staff']);
    }

    // Check if a user is a host for a specific business
    function isHostFor(uid, businessId) {
        let profile = getUserProfile(uid);
        return profile.businessId == businessId && hasRole(uid, 'host');
    }


    // ====== Publicly Readable Collections ======
    
    // Businesses can be read by anyone to show public pages
    match /businesses/{businessId} {
      allow read: if true;
      allow write: if isAuthenticated() && isSuperAdmin(request.auth.uid);
    }
    
    // Business entities (promos, events) can be read by anyone for public pages
    match /businessEntities/{entityId} {
        allow read: if true;
        
        // Allow write only by staff of the associated business or superadmin
        allow create, update, delete: if isAuthenticated() && 
            (isSuperAdmin(request.auth.uid) || isStaffFor(request.auth.uid, resource.data.businessId));
    }


    // ====== Authenticated Access Only ======

    // Platform user profiles
    match /platformUsers/{userId} {
      allow get: if isAuthenticated(); // Any authenticated user can get a profile (e.g., to see promoter name)
      
      // List access is restricted
      allow list: if isAuthenticated() && 
                      (isSuperAdmin(request.auth.uid) || 
                       isStaffFor(request.auth.uid, getUserProfile(request.auth.uid).businessId));
                       
      // Superadmin can create any user
      // A business_admin can create a user ONLY if the new user is for THEIR business
      allow create: if isAuthenticated() &&
                      (isSuperAdmin(request.auth.uid) ||
                       (hasRole(request.auth.uid, 'business_admin') && 
                        request.resource.data.businessId == getUserProfile(request.auth.uid).businessId));

      // Superadmin can update any user
      // A user can update their own profile (future use)
      // A business_admin or staff can update a user IF they belong to the same business
      allow update: if isAuthenticated() &&
                      (isSuperAdmin(request.auth.uid) ||
                       request.auth.uid == userId ||
                       (isStaffFor(request.auth.uid, getUserProfile(request.auth.uid).businessId) &&
                        resource.data.businessId == getUserProfile(request.auth.uid).businessId));

      // Superadmin can delete any user
      // A business_admin can delete a user IF they belong to the same business
      allow delete: if isAuthenticated() &&
                      (isSuperAdmin(request.auth.uid) ||
                       (isBusinessAdminFor(request.auth.uid, getUserProfile(request.auth.uid).businessId) &&
                        resource.data.businessId == getUserProfile(request.auth.uid).businessId));
    }

    // QR Clients: Can be created by anyone (public flow), read by staff/superadmin
    match /qrClients/{clientId} {
      allow create: if true; // Public client registration
      allow read: if isAuthenticated() && 
                    (isSuperAdmin(request.auth.uid) || isStaffFor(request.auth.uid, resource.data.generatedForBusinessId));
      allow list: if isAuthenticated() && (isSuperAdmin(request.auth.uid) || hasAnyRole(request.auth.uid, ['business_admin', 'staff']));
      allow write: if isAuthenticated() && isSuperAdmin(request.auth.uid);
    }
    
    // Socio VIP Members: Only Superadmin can manage
    match /socioVipMembers/{memberId} {
      allow read, write: if isAuthenticated() && isSuperAdmin(request.auth.uid);
    }
    
    // Business-Promoter links: Managed by staff of the respective business or superadmin
    match /businessPromoterLinks/{linkId} {
        allow read, write: if isAuthenticated() &&
            (isSuperAdmin(request.auth.uid) || isStaffFor(request.auth.uid, resource.data.businessId));
    }


    // ====== Fallback - Deny All Other Access ======
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
