
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSuperAdmin(userId) {
      return get(/databases/$(database)/documents/platformUsers/$(userId)).data.roles.hasAny(['superadmin']);
    }

    function isBusinessStaffOrAdmin(userId, businessId) {
      let userProfile = get(/databases/$(database)/documents/platformUsers/$(userId)).data;
      return userProfile.businessId == businessId && userProfile.roles.hasAny(['business_admin', 'staff']);
    }
    
    function isHost(userId, businessId) {
      let userProfile = get(/databases/$(database)/documents/platformUsers/$(userId)).data;
      return userProfile.businessId == businessId && userProfile.roles.hasAny(['host']);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    // --- Collection Rules ---

    // Businesses: Public can read, Super Admin can manage.
    match /businesses/{businessId} {
      allow read: if true;
      allow write: if isSignedIn() && isSuperAdmin(request.auth.uid);
    }

    // Platform Users: Admins manage, users can read their own profile.
    match /platformUsers/{userId} {
      // A user can read their own profile
      allow get: if isSignedIn() && request.auth.uid == userId;
      
      // Super Admins can list, create, update, and delete any user profile
      allow list, write: if isSignedIn() && isSuperAdmin(request.auth.uid);
    }
    
    // SocioVip Members: Super Admin management only.
    match /socioVipMembers/{memberId} {
      allow read, write: if isSignedIn() && isSuperAdmin(request.auth.uid);
    }
    
    // QR Clients: Public can create, Admins can manage.
    match /qrClients/{clientId} {
        allow read, write: if isSignedIn() && isSuperAdmin(request.auth.uid);
        allow create: if true;
    }
    
    // Business Entities (Promos/Events): Public can read, business staff can write.
    match /businessEntities/{entityId} {
        allow read: if true;
        allow write: if isSignedIn() && isBusinessStaffOrAdmin(request.auth.uid, request.resource.data.businessId);
    }
    
    // Business Promoter Links: Business staff can manage their own links.
    match /businessPromoterLinks/{linkId} {
        allow read, write: if isSignedIn() && isBusinessStaffOrAdmin(request.auth.uid, resource.data.businessId);
    }

    // Storage Rules require reading Firestore, so we need a broad read rule
    // for authenticated users on their own user document. This is covered by the `get` rule on platformUsers.
  }
}
